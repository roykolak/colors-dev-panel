// Generated by CoffeeScript 1.6.1
(function() {
  var ColorModel, ColorView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ColorModel = (function(_super) {

    __extends(ColorModel, _super);

    function ColorModel() {
      return ColorModel.__super__.constructor.apply(this, arguments);
    }

    ColorModel.prototype.initialize = function() {
      return this.set({
        rgb: Color(this.get('hex')).rgbString(),
        hsl: Color(this.get('hex')).hslString()
      });
    };

    ColorModel.prototype.lightenRange = function(range) {
      var i, _i, _results;
      if (range == null) {
        range = 20;
      }
      _results = [];
      for (i = _i = 1; 1 <= range ? _i <= range : _i >= range; i = 1 <= range ? ++_i : --_i) {
        if (i.toString().length === 1) {
          i = "0" + i;
        }
        _results.push(Color(this.get('hex')).lighten("0." + i).hexString());
      }
      return _results;
    };

    ColorModel.prototype.darkenRange = function(range) {
      var i, _i, _results;
      if (range == null) {
        range = 20;
      }
      _results = [];
      for (i = _i = 1; 1 <= range ? _i <= range : _i >= range; i = 1 <= range ? ++_i : --_i) {
        if (i.toString().length === 1) {
          i = "0" + i;
        }
        _results.push(Color(this.get('hex')).darken("0." + i).hexString());
      }
      return _results;
    };

    ColorModel.prototype.saturateRange = function(range) {
      var i, _i, _results;
      if (range == null) {
        range = 20;
      }
      _results = [];
      for (i = _i = 1; 1 <= range ? _i <= range : _i >= range; i = 1 <= range ? ++_i : --_i) {
        if (i.toString().length === 1) {
          i = "0" + i;
        }
        _results.push(Color(this.get('hex')).saturate("0." + i).hexString());
      }
      return _results;
    };

    return ColorModel;

  })(Backbone.Model);

  ColorView = (function(_super) {

    __extends(ColorView, _super);

    function ColorView() {
      return ColorView.__super__.constructor.apply(this, arguments);
    }

    ColorView.prototype.template = "<div class=\"profile\">\n  <div class=\"swatch\" style=\"background: {{hex}}\"></div>\n  <dl class=\"formats\">\n    <dt>HEX</dt>\n    <dd>{{hex}}</dd>\n    <dt>RGB</dt>\n    <dd>{{rgb}}</dd>\n    <dt>HSL</dt>\n    <dd>{{hsl}}</dd>\n  </dl>\n</div>\n<ul class=\"lighten\">\n  {{#lighten}}\n    <li data-color=\"{{.}}\" style=\"background: {{.}}\">\n      <a href=\"#\"></a>\n    </li>\n  {{/lighten}}\n</ul>\n<ul class=\"darken\">\n  {{#darken}}\n    <li data-color=\"{{.}}\" style=\"background: {{.}}\">\n      <a href=\"#\"></a>\n    </li>\n  {{/darken}}\n</ul>\n<ul class=\"saturate\">\n  {{#saturate}}\n    <li data-color=\"{{.}}\" style=\"background: {{.}}\">\n      <a href=\"#\"></a>\n    </li>\n  {{/saturate}}\n</ul>";

    ColorView.prototype.render = function() {
      this.$el.html(Mustache.render(this.template, _.extend({}, this.model.toJSON(), {
        lighten: this.model.lightenRange(),
        darken: this.model.darkenRange(),
        saturate: this.model.saturateRange()
      })));
      return this;
    };

    return ColorView;

  })(Backbone.View);

  $(function() {
    return new ColorView({
      model: new ColorModel({
        hex: '#4573D5'
      }),
      el: $('#color')
    }).render();
  });

}).call(this);
