// Generated by CoffeeScript 1.6.1
(function() {
  var ColorLib, ColorModel, ColorView, Colors, ColorsView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ColorLib = {
    lighten: function(hex, decimal) {
      return Color(hex).lighten(decimal).hexString();
    },
    darken: function(hex, decimal) {
      return Color(hex).darken(decimal).hexString();
    },
    saturate: function(hex, decimal) {
      return Color(hex).saturate(decimal).hexString();
    },
    range: function() {
      var i, out, _i;
      out = [];
      for (i = _i = 1; _i <= 100; i = ++_i) {
        if (i % 5 === 0) {
          out.push(i);
        }
      }
      return out;
    },
    lightenRange: function(hex, range) {
      var i, out;
      if (range == null) {
        range = 20;
      }
      out = (function() {
        var _i, _len, _ref, _results;
        _ref = this.range();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          _results.push(this.lighten(hex, i / 100));
        }
        return _results;
      }).call(this);
      return out.splice(0, range);
    },
    darkenRange: function(hex, range) {
      var i, out;
      if (range == null) {
        range = 20;
      }
      out = (function() {
        var _i, _len, _ref, _results;
        _ref = this.range();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          _results.push(this.darken(hex, i / 100));
        }
        return _results;
      }).call(this);
      return out.splice(0, range);
    },
    saturateRange: function(hex, range) {
      var i, out;
      if (range == null) {
        range = 20;
      }
      out = (function() {
        var _i, _len, _ref, _results;
        _ref = this.range();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          _results.push(this.saturate(hex, i / 100));
        }
        return _results;
      }).call(this);
      return out.splice(0, range);
    }
  };

  ColorModel = (function(_super) {

    __extends(ColorModel, _super);

    function ColorModel() {
      return ColorModel.__super__.constructor.apply(this, arguments);
    }

    ColorModel.prototype.initialize = function() {
      return this.set({
        rgb: Color(this.get('hex')).rgbString(),
        hsl: Color(this.get('hex')).hslString()
      });
    };

    return ColorModel;

  })(Backbone.Model);

  Colors = (function(_super) {

    __extends(Colors, _super);

    function Colors() {
      return Colors.__super__.constructor.apply(this, arguments);
    }

    Colors.prototype.model = ColorModel;

    return Colors;

  })(Backbone.Collection);

  ColorsView = (function(_super) {

    __extends(ColorsView, _super);

    function ColorsView() {
      return ColorsView.__super__.constructor.apply(this, arguments);
    }

    ColorsView.prototype.template = "<ul class=\"colors\">\n  {{#colors}}\n    <li data-color=\"{{hex}}\" style=\"background: {{hex}}\">\n      <a href=\"#\"></a>\n    </li>\n  {{/colors}}\n</ul>";

    ColorsView.prototype.initialize = function() {
      return this.collection.on("add", this.onColorAdd, this);
    };

    ColorsView.prototype.render = function() {
      this.$el.html(Mustache.render(this.template, {
        colors: this.collection.toJSON().reverse()
      }));
      return this;
    };

    ColorsView.prototype.onColorAdd = function() {
      return this.render();
    };

    return ColorsView;

  })(Backbone.View);

  ColorView = (function(_super) {

    __extends(ColorView, _super);

    function ColorView() {
      return ColorView.__super__.constructor.apply(this, arguments);
    }

    ColorView.prototype.template = "<div class=\"profile\">\n  <div class=\"swatch\" style=\"background: {{hex}}\"></div>\n  <div class=\"formats\">\n    <dl>\n      <dt>HEX</dt>\n      <dd>{{hex}}</dd>\n      <dt>RGB</dt>\n      <dd>{{rgb}}</dd>\n      <dt>HSL</dt>\n      <dd>{{hsl}}</dd>\n    </dl>\n  </div>\n</div>\n<ul class=\"lighten colors\">\n  {{#lighten}}\n    <li style=\"background: {{.}}\">\n      <a href=\"#\" data-color=\"{{.}}\" class=\"color\"></a>\n    </li>\n  {{/lighten}}\n</ul>\n<ul class=\"darken colors\">\n  {{#darken}}\n    <li style=\"background: {{.}}\">\n      <a href=\"#\" data-color=\"{{.}}\" class=\"color\"></a>\n    </li>\n  {{/darken}}\n</ul>\n<ul class=\"saturate\">\n  {{#saturate}}\n    <li style=\"background: {{.}}\">\n      <a href=\"#\" data-color=\"{{.}}\" class=\"color\"></a>\n    </li>\n  {{/saturate}}\n</ul>";

    ColorView.prototype.events = {
      'click .color': 'onColorClick'
    };

    ColorView.prototype.initialize = function() {
      return this.model.on('change:hex', this.onHexChange, this);
    };

    ColorView.prototype.render = function() {
      this.$el.html(Mustache.render(this.template, _.extend({}, this.model.toJSON(), {
        lighten: ColorLib.lightenRange(this.model.get('hex')),
        darken: ColorLib.darkenRange(this.model.get('hex')),
        saturate: ColorLib.saturateRange(this.model.get('hex'))
      })));
      return this;
    };

    ColorView.prototype.onColorClick = function(ev) {
      ev.preventDefault();
      this.model.set({
        hex: $(ev.currentTarget).data('color')
      });
      return this.collection.add({
        hex: this.model.get('hex')
      });
    };

    ColorView.prototype.onHexChange = function() {
      return this.render();
    };

    return ColorView;

  })(Backbone.View);

  $(function() {
    var recentColors;
    recentColors = new Colors({
      hex: '#4573D5'
    });
    new ColorsView({
      collection: recentColors,
      el: $('#recent_colors')
    }).render();
    return new ColorView({
      model: new ColorModel({
        hex: '#4573D5'
      }),
      collection: recentColors,
      el: $('#color')
    }).render();
  });

}).call(this);
