// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Panel.Views.TabView = (function(_super) {

    __extends(TabView, _super);

    function TabView() {
      return TabView.__super__.constructor.apply(this, arguments);
    }

    TabView.prototype.template = "<div class=\"tab_header\">\n  <a href=\"#\" class=\"collapse\"></a>\n  <a href=\"#\" class=\"expand\" style=\"display: none;\"></a>\n  <ul class=\"tabs\">\n    <li class=\"selected\" data-tab=\"lighten\">\n      <a href=\"#\">Lighten</a>\n    </li>\n    <li data-tab=\"darken\">\n      <a href=\"#\">Darken</a>\n    </li>\n    <li data-tab=\"saturate\">\n      <a href=\"#\">Saturate</a>\n    </li>\n    <li data-tab=\"desaturate\">\n      <a href=\"#\">Desaturate</a>\n    </li>\n    <li data-tab=\"blend\">\n      <a href=\"#\">Blend</a>\n    </li>\n    <li data-tab=\"schemas\">\n      <a href=\"#\">Schemas</a>\n    </li>\n  </ul>\n</div>\n<div id=\"tab_content\" style=\"overflow: scroll\"></div>";

    TabView.prototype.events = {
      "click ul.tabs > li": "onItemClick",
      "click .collapse": "onCollapseClick",
      "click .expand": "onExpandClick"
    };

    TabView.prototype.render = function() {
      this.$el.html(Mustache.render(this.template));
      this.trigger('selection', this.model.get('tab'));
      if (this.model.get('pageColorsCollapsed')) {
        this.onCollapseClick();
      }
      return this;
    };

    TabView.prototype.onItemClick = function(ev) {
      var $el;
      ev.preventDefault();
      $el = $(ev.currentTarget);
      this.$('.selected').removeClass('selected');
      $el.addClass('selected');
      this.trigger('selection', $el.data('tab'));
      return this.model.set({
        tab: $el.data('data')
      });
    };

    TabView.prototype.update = function($el) {
      return this.$('#tab_content').html($el);
    };

    TabView.prototype.onCollapseClick = function(ev) {
      ev.preventDefault();
      this.$('.expand').show();
      this.$('.collapse').hide();
      $('body').addClass('collapsed_page_colors');
      return this.model.unset('syncColor');
    };

    TabView.prototype.onExpandClick = function(ev) {
      ev.preventDefault();
      this.$('.expand').hide();
      this.$('.collapse').show();
      return $('body').removeClass('collapsed_page_colors');
    };

    return TabView;

  })(Backbone.View);

}).call(this);
