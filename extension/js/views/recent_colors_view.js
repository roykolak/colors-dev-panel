// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Panel.Views.RecentColorsView = (function(_super) {

    __extends(RecentColorsView, _super);

    function RecentColorsView() {
      return RecentColorsView.__super__.constructor.apply(this, arguments);
    }

    RecentColorsView.prototype.template = "<ul class=\"recent_colors\">\n  {{#colors}}\n    <li style=\"background: {{color}}\" data-color=\"{{color}}\" class=\"color\"></li>\n  {{/colors}}\n</ul>";

    RecentColorsView.prototype.events = {
      "click .color": "onColorClick"
    };

    RecentColorsView.prototype.initialize = function() {
      this.collection.on('add', this.onColorAdd, this);
      return this.collection.on('reset', this.render, this);
    };

    RecentColorsView.prototype.render = function() {
      var properties;
      properties = {
        colors: this.collection.toJSON().reverse().splice(0, 8)
      };
      this.$el.html(Mustache.render(this.template, properties));
      return this;
    };

    RecentColorsView.prototype.onColorClick = function(ev) {
      var value;
      ev.preventDefault();
      value = $(ev.currentTarget).data('color');
      return this.model.set({
        color: value
      });
    };

    RecentColorsView.prototype.onColorAdd = function() {
      return this.render();
    };

    return RecentColorsView;

  })(Backbone.View);

}).call(this);
