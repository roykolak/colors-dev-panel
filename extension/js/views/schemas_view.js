// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Panel.Views.SchemaView = (function(_super) {

    __extends(SchemaView, _super);

    function SchemaView() {
      return SchemaView.__super__.constructor.apply(this, arguments);
    }

    SchemaView.prototype.template = "<dl>\n  <dt>Complementary</dt>\n  <dd class=\"complementary\"></dd>\n  <dt>Triadic</dt>\n  <dd class=\"triadic\"></dd>\n  <dt>Analogous</dt>\n  <dd class=\"analogous\"></dd>\n  <dt>Neutral</dt>\n  <dd class=\"neutral\"></dd>\n  <dt>Tetradic</dt>\n  <dd class=\"tetradic\"></dd>\n  <dt>SixTone</dt>\n  <dd class=\"sixTone\"></dd>\n</dl>";

    SchemaView.prototype.initialize = function() {
      return this.model.on('change:color', this.render, this);
    };

    SchemaView.prototype.render = function() {
      this.$el.html(Mustache.render(this.template));
      this.renderColors();
      return this;
    };

    SchemaView.prototype.renderColors = function() {
      var color, schema, view, _i, _len, _ref, _results,
        _this = this;
      color = this.model.get('color');
      _ref = ['complementary', 'triadic', 'analogous', 'sixTone', 'neutral', 'tetradic'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        schema = _ref[_i];
        view = new Panel.Views.ColorsView({
          model: this.model,
          colors: Panel.Lib.Color[schema](color)
        });
        view.on('select', function(color) {
          return _this.model.set({
            color: color
          });
        });
        _results.push(this.$("." + schema).html(view.render().el));
      }
      return _results;
    };

    return SchemaView;

  })(Backbone.View);

}).call(this);
