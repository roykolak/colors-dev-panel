// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Panel.Views.SchemaView = (function(_super) {

    __extends(SchemaView, _super);

    function SchemaView() {
      return SchemaView.__super__.constructor.apply(this, arguments);
    }

    SchemaView.prototype.template = "<h4>Complementary</h4>\n<div class=\"complementary\"></div>\n<h4>Triadic</h4>\n<div class=\"triadic\"></div>\n<h4>Analogous</h4>\n<div class=\"analogous\"></div>\n<h4>Neutral</h4>\n<div class=\"neutral\"></div>\n<h4>Tetradic</h4>\n<div class=\"tetradic\"></div>\n<h4>SixTone</h4>\n<div class=\"sixTone\"></div>";

    SchemaView.prototype.render = function() {
      this.$el.html(Mustache.render(this.template));
      this.renderColors();
      return this;
    };

    SchemaView.prototype.renderColors = function() {
      var color, schema, view, _i, _len, _ref, _results;
      color = this.model.get('color');
      _ref = ['complementary', 'triadic', 'analogous', 'sixTone', 'neutral', 'tetradic'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        schema = _ref[_i];
        view = new Panel.Views.ColorsView({
          colors: Panel.Lib.Color[schema](color)
        });
        _results.push(this.$("." + schema).html(view.render().el));
      }
      return _results;
    };

    return SchemaView;

  })(Backbone.View);

}).call(this);
