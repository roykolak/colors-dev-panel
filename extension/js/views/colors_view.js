// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Panel.Views.ColorsView = (function(_super) {

    __extends(ColorsView, _super);

    function ColorsView() {
      return ColorsView.__super__.constructor.apply(this, arguments);
    }

    ColorsView.prototype.template = "<ol class=\"colors\">\n  {{#colors}}\n    <li style=\"background: {{.}}\">\n      <a href=\"#\" data-color=\"{{.}}\" class=\"color\"></a>\n      <a href=\"#\" data-color=\"{{.}}\" title=\"copy to clipboard\" class=\"fa fa-copy copy\"></a>\n    </li>\n  {{/colors}}\n</ol>";

    ColorsView.prototype.events = {
      "click .copy": "onCopyClicked"
    };

    ColorsView.prototype.initialize = function(options) {
      return this.colors = options.colors;
    };

    ColorsView.prototype.render = function() {
      this.$el.html(Mustache.render(this.template, {
        colors: this.colors
      }));
      return this;
    };

    ColorsView.prototype.onCopyClicked = function(ev) {
      var $el, copyDiv;
      ev.preventDefault();
      $el = $(ev.currentTarget);
      copyDiv = document.createElement('div');
      copyDiv.contentEditable = true;
      document.body.appendChild(copyDiv);
      copyDiv.innerHTML = $el.data('color');
      copyDiv.unselectable = "off";
      copyDiv.focus();
      document.execCommand('SelectAll');
      document.execCommand("Copy", false, null);
      return document.body.removeChild(copyDiv);
    };

    return ColorsView;

  })(Backbone.View);

}).call(this);
