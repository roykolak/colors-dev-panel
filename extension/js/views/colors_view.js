// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Panel.Views.ColorsView = (function(_super) {

    __extends(ColorsView, _super);

    function ColorsView() {
      return ColorsView.__super__.constructor.apply(this, arguments);
    }

    ColorsView.prototype.template = "<ol class=\"colors {{#syncColor}}syncing{{/syncColor}}\">\n  {{#colors}}\n    <li style=\"background: {{.}}\" data-color=\"{{.}}\" draggable=\"true\">\n      <a href=\"#\" data-color=\"{{.}}\" title=\"copy to clipboard\" class=\"fa fa-copy copy\"></a>\n    </li>\n  {{/colors}}\n</ol>";

    ColorsView.prototype.events = {
      "click .copy": "onCopyClicked",
      "click li": "onColorClicked"
    };

    ColorsView.prototype.initialize = function(options) {
      this.colors = options.colors;
      this.draggable = options.draggable || true;
      return this.droppable = options.droppable || false;
    };

    ColorsView.prototype.render = function() {
      var handleDragEnd, handleDragStart, properties,
        _this = this;
      properties = _.extend({}, this.model.toJSON(), {
        colors: this.colors
      });
      this.$el.html(Mustache.render(this.template, properties));
      if (this.draggable) {
        handleDragStart = function(ev) {
          var $el;
          ev.stopPropagation();
          $el = $(ev.currentTarget);
          $el.addClass('dragging');
          return ev.dataTransfer.setData('application/json', JSON.stringify({
            color: $el.data('color')
          }));
        };
        handleDragEnd = function(ev) {
          var $el;
          $el = $(ev.currentTarget);
          return $el.removeClass('dragging');
        };
        this.$('li').each(function(i, el) {
          el.addEventListener('dragstart', handleDragStart, false);
          return el.addEventListener('dragend', handleDragEnd, false);
        });
      }
      if (this.droppable) {
        this.$('li').each(function(i, $el) {
          $el.addEventListener('dragenter', function(ev) {
            return $(ev.currentTarget).addClass('over');
          }, false);
          $el.addEventListener('dragleave', function(ev) {
            return $(ev.currentTarget).removeClass('over');
          }, false);
          $el.addEventListener('dragover', function(ev) {
            ev.preventDefault();
            return ev.dataTransfer.effect = 'move';
          }, false);
          return $el.addEventListener('drop', function(ev) {
            var draggedData;
            $el = $(ev.currentTarget);
            ev.stopPropagation();
            draggedData = JSON.parse(ev.dataTransfer.getData('application/json'));
            return _this.model.set({
              syncColor: $el.data('color'),
              color: draggedData.color,
              rangeStart: draggedData.color
            });
          }, false);
        });
      }
      return this;
    };

    ColorsView.prototype.onCopyClicked = function(ev) {
      var $el, color, copyDiv;
      ev.stopImmediatePropagation();
      $el = $(ev.currentTarget);
      color = (function() {
        switch (this.model.get('copyFormat')) {
          case 'rgb':
            return Panel.Lib.Color.toRgbCSS($el.data('color'));
          case 'hsl':
            return Panel.Lib.Color.toHslCSS($el.data('color'));
          case 'hex':
            return Panel.Lib.Color.toHexCSS($el.data('color'));
        }
      }).call(this);
      copyDiv = document.createElement('div');
      copyDiv.contentEditable = true;
      document.body.appendChild(copyDiv);
      copyDiv.innerHTML = color;
      copyDiv.unselectable = "off";
      copyDiv.focus();
      document.execCommand('SelectAll');
      document.execCommand("Copy", false, null);
      document.body.removeChild(copyDiv);
      return $el.parent().addClass('flash_once fast_animated');
    };

    ColorsView.prototype.onColorClicked = function(ev) {
      var $el, event;
      ev.preventDefault();
      $el = $(ev.currentTarget);
      event = $el.hasClass('selected') ? 'unselect' : 'select';
      return this.trigger(event, $el.data('color'), $el);
    };

    return ColorsView;

  })(Backbone.View);

}).call(this);
