// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Panel.Views.PaletteView = (function(_super) {

    __extends(PaletteView, _super);

    function PaletteView() {
      return PaletteView.__super__.constructor.apply(this, arguments);
    }

    PaletteView.prototype.template = "<ul class=\"tabs\">\n  <li class=\"selected\">\n    <a href=\"#\">Page Colors</a>\n  </li>\n</ul>\n<a href=\"#\" class=\"fetch_colors\">Reload</a>\n<p class=\"palette_instructions\">Select color to modify on page</p>\n<div class=\"range_colors\">\n  <span>Text colors</span>\n  <div class=\"color_values values\"></div>\n  <span>Background colors</span>\n  <div class=\"backgroundColor_values values\"></div>\n</div>";

    PaletteView.prototype.events = {
      "click .fetch_colors": "onFetchColorsClick"
    };

    PaletteView.prototype.initialize = function() {
      this.model.on('change:palette', this.render, this);
      this.model.on('change:syncColor', this.onSyncColorChange, this);
      return this.fetchPalette();
    };

    PaletteView.prototype.fetchPalette = function() {
      var port,
        _this = this;
      if (chrome.runtime != null) {
        port = chrome.runtime.connect();
        port.postMessage({
          label: 'fetch_palette'
        });
        return port.onMessage.addListener(function(msg) {
          return _this.model.set({
            palette: msg
          });
        });
      }
    };

    PaletteView.prototype.render = function() {
      this.$el.html(Mustache.render(this.template, _.extend({}, this.model.toJSON(), {
        amount: this.model.get('palette').length
      })));
      this.renderColors();
      return this;
    };

    PaletteView.prototype.renderColors = function() {
      var colorsView, property, _i, _len, _ref, _results,
        _this = this;
      _ref = ['color', 'backgroundColor'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        property = _ref[_i];
        colorsView = new Panel.Views.ColorsView({
          model: this.model,
          colors: this.model.get('palette')[property],
          draggable: false,
          droppable: true,
          cssProperty: property
        });
        colorsView.on('select', function(color, $el) {
          _this.model.set({
            color: color,
            syncColor: color,
            rangeStart: color
          });
          colorsView.$('.selected').removeClass('selected');
          _this.$('.range_colors li').css({
            opacity: 0.2
          });
          $el.addClass('selected');
          return $el.css({
            opacity: 1
          });
        });
        colorsView.on('unselect', function(color, $el) {
          _this.model.unset('syncColor');
          colorsView.$('.selected').removeClass('selected');
          return _this.$('.range_colors li').css({
            opacity: 1
          });
        });
        if (chrome.runtime != null) {
          colorsView.on('mouseover', function(color, $el, cssProperty) {
            var port;
            port = chrome.runtime.connect();
            return port.postMessage({
              label: 'color_to_sync_highlight',
              color: color,
              cssProperty: cssProperty
            });
          });
          colorsView.on('mouseout', function(color, $el, cssProperty) {
            var port;
            port = chrome.runtime.connect();
            return port.postMessage({
              label: 'color_to_sync_unhighlight',
              color: color,
              cssProperty: cssProperty
            });
          });
        }
        _results.push(this.$(".range_colors ." + property + "_values").html(colorsView.render().el));
      }
      return _results;
    };

    PaletteView.prototype.onReloadClick = function(ev) {
      ev.preventDefault();
      this.model.set({
        palette: []
      });
      return this.fetchPalette();
    };

    PaletteView.prototype.onSyncColorChange = function() {
      var $el;
      if (this.model.get('syncColor') != null) {
        this.$('.range_colors .selected').removeClass('selected');
        this.$('.range_colors li').css({
          opacity: 0.2
        });
        $el = this.$("li[data-color='" + (this.model.get('syncColor')) + "']");
        $el.addClass('selected');
        return $el.css({
          opacity: 1
        });
      } else {
        this.$('.range_colors .selected').removeClass('selected');
        return this.$('.range_colors li').css({
          opacity: 1
        });
      }
    };

    PaletteView.prototype.onFetchColorsClick = function(ev) {
      ev.preventDefault();
      return this.fetchPalette();
    };

    return PaletteView;

  })(Backbone.View);

}).call(this);
